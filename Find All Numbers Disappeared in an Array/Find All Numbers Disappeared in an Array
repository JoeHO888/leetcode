class Solution:
    def findDisappearedNumbers(self, nums: List[int]) -> List[int]:

        # Place element in correct index
        res = []
        print(nums)

        for i in range(len(nums)):
            print(i)
            while nums[nums[i] - 1] != nums[i]:
                c = nums[nums[i] - 1]
                nums[nums[i] - 1] = nums[i]
                nums[i] = c
        
        for i in range(len(nums)):
            if nums[i] != i + 1:
                res.append( i + 1)

        return res        

        # Mark as seen

        res = []

        for num in nums:
            index = abs(num) - 1
            if nums[index] > 0:
                nums[index] = -nums[index]
        
        for i in range(len(nums)):
            if nums[i] > 0:
                res.append(i + 1)
        
        return res

        # Brutal Force + binary search
        res = []
        n = len(nums)
        nums.sort()
        self.nums = nums
        
        def binarySearch(i):
            l,r = 0, len(self.nums) - 1

            while l <= r:
                m = (l + r) //2

                if self.nums[m] == i:
                    return m
                elif self.nums[m] > i:
                    r = m - 1
                else:
                    l = m + 1
            return - 1
    

        for i in range(1, n + 1):

            pos = binarySearch(i)

            if pos == -1:
                res.append(i)
        
        return res

        # Brutal Force

        res = []
        n = len(nums)
        for i in range(1, n + 1):
            found = False
            for num in nums:
                if i == num:
                    found = True
                    break
            
            if not found:
                res.append(i)
        
        return res

        
        # Hash Set
        res = []
        n = len(nums)
        numSet = set(nums)

        for i in range(1, n + 1):
            if not i in numSet:
                res.append(i)
        
        return res