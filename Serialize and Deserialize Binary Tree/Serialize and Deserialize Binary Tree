# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

import collections
class Codec:

    def serialize(self, root):
        """Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        """

        queue = collections.deque([])
        res = []

        if root:
            queue.append(root)
        
        while queue:
            curr = queue.popleft()
            
            if curr:
                res.append(str(curr.val))
                queue.append(curr.left)
                queue.append(curr.right)
            else:
                res.append("N")

        return ";".join(res)
                

    def deserialize(self, data):
        """Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode
        """

        nodes = data.split(";")

        if not data:
            return None

        head = TreeNode(int(nodes[0]))
        
        queue = collections.deque([])
        queue.append(head)
        currIndex = 1

        while currIndex < len(nodes):

            leftNodeVal = nodes[currIndex]

            currIndex += 1
            rightNodeVal = nodes[currIndex]

            if leftNodeVal != "N":
                leftNode = TreeNode(int(leftNodeVal))
                queue[0].left = leftNode
                queue.append(leftNode)
            
            if rightNodeVal != "N":
                rightNode = TreeNode(int(rightNodeVal))
                queue[0].right = rightNode
                queue.append(rightNode)                

            queue.popleft()
            currIndex += 1
        
        return head


# Your Codec object will be instantiated and called as such:
# ser = Codec()
# deser = Codec()
# ans = deser.deserialize(ser.serialize(root))