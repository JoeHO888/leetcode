# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:
    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:

        if not subRoot:
            return True

        if not root:
            return False

        if self.sameTree(root, subRoot):
            return True
        
        else:
            return self.isSubtree(root.left, subRoot) or self.isSubtree(root.right, subRoot)

    def sameTree(self, tree1, tree2):

        # All None
        if not tree1 and not tree2:
            return True
        
        # tree2 None
        if tree1 and not tree2:
            return False
        
        # tree1 None
        if not tree1 and tree2:
            return False
        
        return (tree1.val == tree2.val) and self.sameTree(tree1.left, tree2.left) and self.sameTree(tree1.right, tree2.right)
        
        