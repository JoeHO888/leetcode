isalnum() -> check if all characters are alphanumeric

Can use it to check if the all characters in text are alphanumeric or just a single character

Example:
"sfA131".isalnum()
"2".isalnum()



heapq to form priority queue or min heap.
heap = []
heapq.heappush(heap, element)
element can be a turple, e.g. (count, e).
When use heapq.heappop, it will only consider the 1st element in the turple, i.e. count in the above example
heapq.heappop(heap) -> pop the 1st element


dictionary.items() -> get turple
Example:
{"a": 1, "b": "2"}.items = [("a", 1), ("b", 2)]

You can specify the key of sorted([("a", 1), ("b", 2)], key=lambda x: x[1])
Refer Top K Frequent Elements - sort.py

You can sort it in descending order by using sorted(array, reverse=True)


Patterns:
Find top K -> heap

If multiple element map to a same value & we need to sort by that value -> bucket sort
Example: {"element1": count1, "element2": count2, ...}, count1,2,... may be same. & We need to sort or make decision by count -> time to use bucket sort
As within each bucket, you dont need to do another sort -> save time